// <auto-generated />
using System;
using JackSite.Authentication.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JackSite.Authentication.Infrastructure.Migrations
{
    [DbContext(typeof(AuthenticationDbContext))]
    partial class AuthenticationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ActionBasicPermissionPolicy", b =>
                {
                    b.Property<long>("ActionBasicsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionPolicyId")
                        .HasColumnType("bigint");

                    b.HasKey("ActionBasicsId", "PermissionPolicyId");

                    b.HasIndex("PermissionPolicyId");

                    b.ToTable("permission_policy_actions", (string)null);
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Actions.ActionBasic", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("ActionDescription")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("action_description");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("action_name");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_action_basics");

                    b.ToTable("action_basics");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientBasic", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("AccessTokenLifespan")
                        .HasColumnType("int")
                        .HasColumnName("access_token_lifespan");

                    b.Property<bool>("Confidential")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("confidential");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("openid-connect")
                        .HasColumnName("protocol");

                    b.Property<int>("RefreshTokenLifespan")
                        .HasColumnType("int")
                        .HasColumnName("refresh_token_lifespan");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("secret");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_client_basics");

                    b.ToTable("client_basics");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientCorsOrigin", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("origin");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_client_cors_origins");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_cors_origins_client_id");

                    b.ToTable("client_cors_origins");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientRedirectUri", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_client_redirect_uris");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_redirect_uris_client_id");

                    b.ToTable("client_redirect_uris");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientScope", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("scope");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_client_scopes");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_scopes_client_id");

                    b.ToTable("client_scopes");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientSession", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<long>("UserSessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_session_id");

                    b.Property<long?>("UserSessionId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_client_sessions");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_sessions_client_id");

                    b.HasIndex("UserSessionId")
                        .HasDatabaseName("ix_client_sessions_user_session_id");

                    b.HasIndex("UserSessionId1");

                    b.ToTable("client_sessions");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailAttachment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("ContentId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("content_id");

                    b.Property<string>("ContentType")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DraftedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("drafted_on_utc");

                    b.Property<long>("EmailRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("email_record_id");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("file_extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_draft");

                    b.Property<bool>("IsInline")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_inline");

                    b.Property<string>("ObjectKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("object_key");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("storage_type");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("upload_time");

                    b.HasKey("Id")
                        .HasName("pk_email_attachments");

                    b.HasIndex("EmailRecordId");

                    b.ToTable("email_attachments");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailBasic", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("DraftedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("drafted_on_utc");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("failure_reason");

                    b.Property<int>("Importance")
                        .HasColumnType("int")
                        .HasColumnName("importance");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_draft");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_try_time");

                    b.Property<string>("MessageId")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("message_id");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int")
                        .HasColumnName("retry_count");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("sender_email");

                    b.Property<string>("SenderName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("sender_name");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sent_time");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("title");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_email_basics");

                    b.ToTable("email_basics");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailContent", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("BCC")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("bcc");

                    b.Property<string>("CC")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("cc");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("DraftedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("drafted_on_utc");

                    b.Property<long>("EmailId")
                        .HasColumnType("bigint")
                        .HasColumnName("email_id");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_draft");

                    b.Property<bool>("IsHtml")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_html");

                    b.Property<string>("PlainTextContent")
                        .HasColumnType("longtext")
                        .HasColumnName("plain_text_content");

                    b.Property<string>("PreviewText")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("preview_text");

                    b.Property<string>("Recipient")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("recipient");

                    b.Property<string>("Subject")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("subject");

                    b.Property<string>("TemplateId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("template_id");

                    b.Property<string>("TemplateParameters")
                        .HasColumnType("longtext")
                        .HasColumnName("template_parameters");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_email_contents");

                    b.HasIndex("EmailId")
                        .IsUnique();

                    b.ToTable("email_contents");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailRecipient", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("DeliveredTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delivered_time");

                    b.Property<DateTime?>("DraftedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("drafted_on_utc");

                    b.Property<long>("EmailRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("email_record_id");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("failure_reason");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_draft");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("read_time");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("recipient_email");

                    b.Property<string>("RecipientName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("recipient_name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("tracking_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_email_recipients");

                    b.HasIndex("EmailRecordId");

                    b.ToTable("email_recipients");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("body");

                    b.Property<string>("Category")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DraftedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("drafted_on_utc");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_draft");

                    b.Property<bool>("IsHtml")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_html");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system");

                    b.Property<DateTime?>("LastUsedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_used_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("parameters");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("subject");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int")
                        .HasColumnName("usage_count");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_email_templates");

                    b.HasIndex("Name", "Version")
                        .IsUnique();

                    b.ToTable("email_templates");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Localization.Translation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("ChineseText")
                        .HasColumnType("longtext")
                        .HasColumnName("chinese_text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("EnglishText")
                        .HasColumnType("longtext")
                        .HasColumnName("english_text");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key_name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_translations");

                    b.ToTable("translations");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Logs.OperationLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("api_name");

                    b.Property<string>("Browser")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("browser");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("description");

                    b.Property<long>("ElapsedMilliseconds")
                        .HasColumnType("bigint")
                        .HasColumnName("elapsed_milliseconds");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsAuthorization")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_authorization");

                    b.Property<string>("Os")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("os");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("status_code");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("user_agent");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_operation_logs");

                    b.ToTable("operation_logs", (string)null);
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Permission.PermissionModel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on_utc");

                    b.Property<string>("FilName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fil_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_permission_models");

                    b.ToTable("permission_models");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Permission.PermissionPolicy", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<long>("ModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("model_id");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("resource_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_permission_policies");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_permission_policies_model_id");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_permission_policies_resource_id");

                    b.ToTable("permission_policies");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Permission.PermissionPolicyCondition", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("data_source");

                    b.Property<string>("Filter")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("filter");

                    b.Property<long?>("PermissionPolicyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PolicyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_permission_policy_conditions");

                    b.HasIndex("PermissionPolicyId");

                    b.HasIndex("PolicyId");

                    b.ToTable("permission_policy_conditions");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Resources.Resource", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("path");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("resource_name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.ToTable("resources");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Roles.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Roles.RoleReference", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_role_references");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_references_role_id");

                    b.ToTable("role_references");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.UserGroups.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("group_name");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_groups_role_id");

                    b.ToTable("user_groups");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.UserGroups.UserGroupReference", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<long>("UserGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_group_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_group_references");

                    b.HasIndex("UserGroupId")
                        .HasDatabaseName("ix_user_group_references_user_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_group_references_user_id");

                    b.ToTable("user_group_references");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserBasic", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastLoginIp")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_login_ip");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_login_time");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int")
                        .HasColumnName("login_count");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("register_time");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("salt");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<long?>("UserProfileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserSettingsId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user_basics");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserProfileId");

                    b.HasIndex("UserSettingsId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user_basics");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_on_utc");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("province");

                    b.Property<string>("RealName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("real_name");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_profiles_user_id");

                    b.ToTable("user_profiles");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserSecurityLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("action");

                    b.Property<string>("Browser")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("browser");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("device_type");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("failure_reason");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_successful");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("operating_system");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_user_security_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_security_logs_user_id");

                    b.HasIndex("UserId1");

                    b.ToTable("user_security_logs");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_access");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_session_user_id");

                    b.ToTable("user_session");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserSettings", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<long>("CreateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("create_by");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("date_format");

                    b.Property<bool>("EnableEmailNotifications")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_email_notifications");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_notifications");

                    b.Property<bool>("EnableSmsNotifications")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_sms_notifications");

                    b.Property<bool>("EnableTwoFactorAuth")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enable_two_factor_auth");

                    b.Property<byte>("Language")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("language");

                    b.Property<byte>("Theme")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("theme");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("time_format");

                    b.Property<byte>("TimeZone")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("time_zone");

                    b.Property<string>("TwoFactorType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("two_factor_type");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<long>("UpdateBy")
                        .HasColumnType("bigint")
                        .HasColumnName("update_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_settings");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_settings_user_id");

                    b.ToTable("user_settings");
                });

            modelBuilder.Entity("ActionBasicPermissionPolicy", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Actions.ActionBasic", null)
                        .WithMany()
                        .HasForeignKey("ActionBasicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JackSite.Authentication.Entities.Permission.PermissionPolicy", null)
                        .WithMany()
                        .HasForeignKey("PermissionPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientCorsOrigin", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Clients.ClientBasic", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_cors_origins_client_basics_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientRedirectUri", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Clients.ClientBasic", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_redirect_uris_client_basics_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientScope", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Clients.ClientBasic", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_scopes_client_basics_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientSession", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Clients.ClientBasic", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_sessions_client_basics_client_id");

                    b.HasOne("JackSite.Authentication.Entities.Users.UserSession", "UserSession")
                        .WithMany()
                        .HasForeignKey("UserSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_sessions_user_session_user_session_id");

                    b.HasOne("JackSite.Authentication.Entities.Users.UserSession", null)
                        .WithMany("ClientSessions")
                        .HasForeignKey("UserSessionId1");

                    b.Navigation("Client");

                    b.Navigation("UserSession");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailAttachment", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Emails.EmailBasic", "EmailBasic")
                        .WithMany("EmailAttachments")
                        .HasForeignKey("EmailRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_attachments_email_basics_email_basic_id");

                    b.Navigation("EmailBasic");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailContent", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Emails.EmailBasic", "EmailBasic")
                        .WithOne("EmailContent")
                        .HasForeignKey("JackSite.Authentication.Entities.Emails.EmailContent", "EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_basics_email_contents_email_content_id");

                    b.Navigation("EmailBasic");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailRecipient", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Emails.EmailBasic", "EmailBasic")
                        .WithMany("EmailRecipients")
                        .HasForeignKey("EmailRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_recipients_email_basics_email_basic_id");

                    b.Navigation("EmailBasic");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Permission.PermissionPolicy", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Permission.PermissionModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_policies_permission_models_model_id");

                    b.HasOne("JackSite.Authentication.Entities.Resources.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_policies_resources_resource_id");

                    b.Navigation("Model");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Permission.PermissionPolicyCondition", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Permission.PermissionPolicy", null)
                        .WithMany("PermissionPolicyConditions")
                        .HasForeignKey("PermissionPolicyId");

                    b.HasOne("JackSite.Authentication.Entities.Permission.PermissionPolicy", null)
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_permission_policy_conditions_permission_policies_permission_~");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Roles.RoleReference", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.UserGroups.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JackSite.Authentication.Entities.Roles.Role", null)
                        .WithMany("RoleReferences")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_references_roles_role_id");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.UserGroups.UserGroup", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Roles.Role", null)
                        .WithMany("UserGroups")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_groups_roles_role_id");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.UserGroups.UserGroupReference", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.UserGroups.UserGroup", "UserGroup")
                        .WithMany("UserGroupReferences")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_group_references_user_groups_user_group_id");

                    b.HasOne("JackSite.Authentication.Entities.Users.UserBasic", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_group_references_user_basics_user_id");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserBasic", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Users.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.HasOne("JackSite.Authentication.Entities.Users.UserSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");

                    b.Navigation("UserProfile");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserProfile", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Users.UserBasic", "User")
                        .WithOne()
                        .HasForeignKey("JackSite.Authentication.Entities.Users.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profiles_user_basics_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserSecurityLog", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Users.UserBasic", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_security_logs_user_basics_user_id");

                    b.HasOne("JackSite.Authentication.Entities.Users.UserBasic", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserSession", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Users.UserBasic", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_session_user_basics_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserSettings", b =>
                {
                    b.HasOne("JackSite.Authentication.Entities.Users.UserBasic", "User")
                        .WithOne()
                        .HasForeignKey("JackSite.Authentication.Entities.Users.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_settings_user_basics_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Clients.ClientBasic", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedScopes");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Emails.EmailBasic", b =>
                {
                    b.Navigation("EmailAttachments");

                    b.Navigation("EmailContent");

                    b.Navigation("EmailRecipients");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Permission.PermissionPolicy", b =>
                {
                    b.Navigation("PermissionPolicyConditions");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Roles.Role", b =>
                {
                    b.Navigation("RoleReferences");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.UserGroups.UserGroup", b =>
                {
                    b.Navigation("UserGroupReferences");
                });

            modelBuilder.Entity("JackSite.Authentication.Entities.Users.UserSession", b =>
                {
                    b.Navigation("ClientSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
