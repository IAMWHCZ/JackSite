services:
  # 基础设施服务
  postgres:
    image: postgres:16
    container_name: jacksite-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: jacksite
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: jacksite-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7
    container_name: jacksite-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb
      MONGO_INITDB_ROOT_PASSWORD: mongodb
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: jacksite-rabbitmq
    restart: always
    ports:
      - "5672:5672"  # AMQP 协议端口
      - "15672:15672"  # 管理界面端口
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  seq:
    image: datalust/seq:latest
    container_name: jacksite-seq
    restart: always
    ports:
      - "5341:80"  # Web UI
      - "5342:5341"  # Ingestion endpoint
    environment:
      ACCEPT_EULA: "Y"
    volumes:
      - seq-data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: jacksite-minio
    restart: always
    ports:
      - "9000:9000"  # API 端口
      - "9001:9001"  # 控制台端口
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.12.0
    container_name: jacksite-elasticsearch
    restart: always
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    container_name: jacksite-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana
    container_name: jacksite-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 应用服务
  jacksite.identity.host:
    image: jacksite.identity.host
    build:
      context: .
      dockerfile: services/identity/JackSite.Identity.Host/Dockerfile
    container_name: jacksite-identity
    restart: always
    ports:
      - "5087:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=Host=postgres;Database=identity;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Seq__Url=http://seq:5341
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      seq:
        condition: service_healthy

  jacksite.blog.webapi:
    image: jacksite.blog.webapi
    build:
      context: .
      dockerfile: services/blogs/JackSite.Blog.WebApi/Dockerfile
    container_name: jacksite-blog
    restart: always
    ports:
      - "5088:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=Host=postgres;Database=blog;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Seq__Url=http://seq:5341
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      seq:
        condition: service_healthy

  jacksite.tools.webapi:
    image: jacksite.tools.webapi
    build:
      context: .
      dockerfile: services/tools/JackSite.Tools.WebAPI/Dockerfile
    container_name: jacksite-tools
    restart: always
    ports:
      - "5089:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=Host=postgres;Database=tools;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__Minio__Endpoint=minio:9000
      - ConnectionStrings__Minio__AccessKey=minioadmin
      - ConnectionStrings__Minio__SecretKey=minioadmin
      - Seq__Url=http://seq:5341
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      seq:
        condition: service_healthy

  jaclsite.blog.webapi:
    image: jaclsite.blog.webapi
    build:
      context: .
      dockerfile: services/blogs/JaclSite.Blog.WebAPI/Dockerfile
    container_name: jaclsite-blog
    restart: always
    ports:
      - "5145:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=Host=postgres;Database=jaclblog;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__MongoDB=mongodb://mongodb:mongodb@mongodb:27017/blog
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - Seq__Url=http://seq:5341
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      seq:
        condition: service_healthy

  jacksite.api.gateway:
    image: jacksite.api.gateway
    build:
      context: .
      dockerfile: gateways/Jacksite.API.Gateway/Dockerfile
    container_name: jacksite-gateway
    restart: always
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__Identity=http://jacksite.identity.host:8080
      - Services__Blog=http://jacksite.blog.webapi:8080
      - Services__JaclBlog=http://jaclsite.blog.webapi:8080
      - Services__Tools=http://jacksite.tools.webapi:8080
      - Seq__Url=http://seq:5341
    depends_on:
      - jacksite.identity.host
      - jacksite.blog.webapi
      - jaclsite.blog.webapi
      - jacksite.tools.webapi
      - seq

volumes:
  postgres-data:
  redis-data:
  mongodb-data:
  rabbitmq-data:
  seq-data:
  minio-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:  jacksite.user.webapi:
    image: jacksite.user.webapi
    build:
      context: .
      dockerfile: services/users/JackSite.User.WebAPI/Dockerfile

services:
  jacksite.notification.grpc:
    image: jacksite.notification.grpc
    build:
      context: .
      dockerfile: services/notifications/JackSite.Notification.Grpc/Dockerfile

