/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/user'
import { Route as SignatureImport } from './routes/signature'
import { Route as RolesImport } from './routes/roles'
import { Route as MonitorImport } from './routes/monitor'
import { Route as DiagramImport } from './routes/diagram'
import { Route as BlogImport } from './routes/blog'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const SignatureRoute = SignatureImport.update({
  id: '/signature',
  path: '/signature',
  getParentRoute: () => rootRoute,
} as any)

const RolesRoute = RolesImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => rootRoute,
} as any)

const MonitorRoute = MonitorImport.update({
  id: '/monitor',
  path: '/monitor',
  getParentRoute: () => rootRoute,
} as any)

const DiagramRoute = DiagramImport.update({
  id: '/diagram',
  path: '/diagram',
  getParentRoute: () => rootRoute,
} as any)

const BlogRoute = BlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogImport
      parentRoute: typeof rootRoute
    }
    '/diagram': {
      id: '/diagram'
      path: '/diagram'
      fullPath: '/diagram'
      preLoaderRoute: typeof DiagramImport
      parentRoute: typeof rootRoute
    }
    '/monitor': {
      id: '/monitor'
      path: '/monitor'
      fullPath: '/monitor'
      preLoaderRoute: typeof MonitorImport
      parentRoute: typeof rootRoute
    }
    '/roles': {
      id: '/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof RolesImport
      parentRoute: typeof rootRoute
    }
    '/signature': {
      id: '/signature'
      path: '/signature'
      fullPath: '/signature'
      preLoaderRoute: typeof SignatureImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/diagram': typeof DiagramRoute
  '/monitor': typeof MonitorRoute
  '/roles': typeof RolesRoute
  '/signature': typeof SignatureRoute
  '/user': typeof UserRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/diagram': typeof DiagramRoute
  '/monitor': typeof MonitorRoute
  '/roles': typeof RolesRoute
  '/signature': typeof SignatureRoute
  '/user': typeof UserRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blog': typeof BlogRoute
  '/diagram': typeof DiagramRoute
  '/monitor': typeof MonitorRoute
  '/roles': typeof RolesRoute
  '/signature': typeof SignatureRoute
  '/user': typeof UserRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/diagram'
    | '/monitor'
    | '/roles'
    | '/signature'
    | '/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blog'
    | '/diagram'
    | '/monitor'
    | '/roles'
    | '/signature'
    | '/user'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/diagram'
    | '/monitor'
    | '/roles'
    | '/signature'
    | '/user'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRoute: typeof BlogRoute
  DiagramRoute: typeof DiagramRoute
  MonitorRoute: typeof MonitorRoute
  RolesRoute: typeof RolesRoute
  SignatureRoute: typeof SignatureRoute
  UserRoute: typeof UserRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRoute: BlogRoute,
  DiagramRoute: DiagramRoute,
  MonitorRoute: MonitorRoute,
  RolesRoute: RolesRoute,
  SignatureRoute: SignatureRoute,
  UserRoute: UserRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blog",
        "/diagram",
        "/monitor",
        "/roles",
        "/signature",
        "/user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blog": {
      "filePath": "blog.tsx"
    },
    "/diagram": {
      "filePath": "diagram.tsx"
    },
    "/monitor": {
      "filePath": "monitor.tsx"
    },
    "/roles": {
      "filePath": "roles.tsx"
    },
    "/signature": {
      "filePath": "signature.tsx"
    },
    "/user": {
      "filePath": "user.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
