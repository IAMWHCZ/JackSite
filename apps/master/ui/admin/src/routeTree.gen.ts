/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as appUserImport } from './routes/(app)/user'
import { Route as appSignatureImport } from './routes/(app)/signature'
import { Route as appRoleImport } from './routes/(app)/role'
import { Route as appMonitorImport } from './routes/(app)/monitor'
import { Route as appLogImport } from './routes/(app)/log'
import { Route as appFileImport } from './routes/(app)/file'
import { Route as appDiagramImport } from './routes/(app)/diagram'
import { Route as appBlogImport } from './routes/(app)/blog'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const appUserRoute = appUserImport.update({
  id: '/(app)/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const appSignatureRoute = appSignatureImport.update({
  id: '/(app)/signature',
  path: '/signature',
  getParentRoute: () => rootRoute,
} as any)

const appRoleRoute = appRoleImport.update({
  id: '/(app)/role',
  path: '/role',
  getParentRoute: () => rootRoute,
} as any)

const appMonitorRoute = appMonitorImport.update({
  id: '/(app)/monitor',
  path: '/monitor',
  getParentRoute: () => rootRoute,
} as any)

const appLogRoute = appLogImport.update({
  id: '/(app)/log',
  path: '/log',
  getParentRoute: () => rootRoute,
} as any)

const appFileRoute = appFileImport.update({
  id: '/(app)/file',
  path: '/file',
  getParentRoute: () => rootRoute,
} as any)

const appDiagramRoute = appDiagramImport.update({
  id: '/(app)/diagram',
  path: '/diagram',
  getParentRoute: () => rootRoute,
} as any)

const appBlogRoute = appBlogImport.update({
  id: '/(app)/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(app)/blog': {
      id: '/(app)/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof appBlogImport
      parentRoute: typeof rootRoute
    }
    '/(app)/diagram': {
      id: '/(app)/diagram'
      path: '/diagram'
      fullPath: '/diagram'
      preLoaderRoute: typeof appDiagramImport
      parentRoute: typeof rootRoute
    }
    '/(app)/file': {
      id: '/(app)/file'
      path: '/file'
      fullPath: '/file'
      preLoaderRoute: typeof appFileImport
      parentRoute: typeof rootRoute
    }
    '/(app)/log': {
      id: '/(app)/log'
      path: '/log'
      fullPath: '/log'
      preLoaderRoute: typeof appLogImport
      parentRoute: typeof rootRoute
    }
    '/(app)/monitor': {
      id: '/(app)/monitor'
      path: '/monitor'
      fullPath: '/monitor'
      preLoaderRoute: typeof appMonitorImport
      parentRoute: typeof rootRoute
    }
    '/(app)/role': {
      id: '/(app)/role'
      path: '/role'
      fullPath: '/role'
      preLoaderRoute: typeof appRoleImport
      parentRoute: typeof rootRoute
    }
    '/(app)/signature': {
      id: '/(app)/signature'
      path: '/signature'
      fullPath: '/signature'
      preLoaderRoute: typeof appSignatureImport
      parentRoute: typeof rootRoute
    }
    '/(app)/user': {
      id: '/(app)/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof appUserImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRoute
  '/login': typeof LoginRoute
  '/blog': typeof appBlogRoute
  '/diagram': typeof appDiagramRoute
  '/file': typeof appFileRoute
  '/log': typeof appLogRoute
  '/monitor': typeof appMonitorRoute
  '/role': typeof appRoleRoute
  '/signature': typeof appSignatureRoute
  '/user': typeof appUserRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRoute
  '/login': typeof LoginRoute
  '/blog': typeof appBlogRoute
  '/diagram': typeof appDiagramRoute
  '/file': typeof appFileRoute
  '/log': typeof appLogRoute
  '/monitor': typeof appMonitorRoute
  '/role': typeof appRoleRoute
  '/signature': typeof appSignatureRoute
  '/user': typeof appUserRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRoute
  '/login': typeof LoginRoute
  '/(app)/blog': typeof appBlogRoute
  '/(app)/diagram': typeof appDiagramRoute
  '/(app)/file': typeof appFileRoute
  '/(app)/log': typeof appLogRoute
  '/(app)/monitor': typeof appMonitorRoute
  '/(app)/role': typeof appRoleRoute
  '/(app)/signature': typeof appSignatureRoute
  '/(app)/user': typeof appUserRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/blog'
    | '/diagram'
    | '/file'
    | '/log'
    | '/monitor'
    | '/role'
    | '/signature'
    | '/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/blog'
    | '/diagram'
    | '/file'
    | '/log'
    | '/monitor'
    | '/role'
    | '/signature'
    | '/user'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/login'
    | '/(app)/blog'
    | '/(app)/diagram'
    | '/(app)/file'
    | '/(app)/log'
    | '/(app)/monitor'
    | '/(app)/role'
    | '/(app)/signature'
    | '/(app)/user'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRoute
  LoginRoute: typeof LoginRoute
  appBlogRoute: typeof appBlogRoute
  appDiagramRoute: typeof appDiagramRoute
  appFileRoute: typeof appFileRoute
  appLogRoute: typeof appLogRoute
  appMonitorRoute: typeof appMonitorRoute
  appRoleRoute: typeof appRoleRoute
  appSignatureRoute: typeof appSignatureRoute
  appUserRoute: typeof appUserRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRoute,
  LoginRoute: LoginRoute,
  appBlogRoute: appBlogRoute,
  appDiagramRoute: appDiagramRoute,
  appFileRoute: appFileRoute,
  appLogRoute: appLogRoute,
  appMonitorRoute: appMonitorRoute,
  appRoleRoute: appRoleRoute,
  appSignatureRoute: appSignatureRoute,
  appUserRoute: appUserRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/login",
        "/(app)/blog",
        "/(app)/diagram",
        "/(app)/file",
        "/(app)/log",
        "/(app)/monitor",
        "/(app)/role",
        "/(app)/signature",
        "/(app)/user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(app)/blog": {
      "filePath": "(app)/blog.tsx"
    },
    "/(app)/diagram": {
      "filePath": "(app)/diagram.tsx"
    },
    "/(app)/file": {
      "filePath": "(app)/file.tsx"
    },
    "/(app)/log": {
      "filePath": "(app)/log.tsx"
    },
    "/(app)/monitor": {
      "filePath": "(app)/monitor.tsx"
    },
    "/(app)/role": {
      "filePath": "(app)/role.tsx"
    },
    "/(app)/signature": {
      "filePath": "(app)/signature.tsx"
    },
    "/(app)/user": {
      "filePath": "(app)/user.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
